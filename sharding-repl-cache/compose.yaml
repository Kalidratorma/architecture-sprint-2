name: sharding-repl-cache
services:
  redis:
    image: "redis:latest"
    container_name: redis
    ports:
      - "6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server" ]
    networks:
      app-network:
        ipv4_address: 173.17.0.9

  configSrv:
    image: mongo:latest
    container_name: configSrv
    restart: always
    ports:
      - "27030:27030"
    volumes:
      - config-data:/data/db
    networks:
      app-network:
        ipv4_address: 173.17.0.30
    command:
      [
        "--configsvr",
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27030"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  router:
    image: mongo:latest
    container_name: router
    restart: always
    ports:
      - "27040:27040"
    networks:
      app-network:
        ipv4_address: 173.17.0.40
    command:
      [
        "mongos",
        "--configdb",
        "config_server/configSrv:27030",
        "--bind_ip_all",
        "--port",
        "27040"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-1:
    image: mongo:latest
    container_name: shard1-1
    restart: always
    ports:
      - "27011:27011"
    volumes:
      - shard1-1-data:/data/db
    networks:
      app-network:
        ipv4_address: 173.17.0.11
    command:
      [
        "--shardsvr",
        "--replSet",
        "rs1",
        "--bind_ip_all",
        "--port",
        "27011"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-2:
    image: mongo:latest
    container_name: shard1-2
    restart: always
    ports:
      - "27012:27012"
    volumes:
      - shard1-2-data:/data/db
    networks:
      app-network:
        ipv4_address: 173.17.0.12
    depends_on:
      - shard1-1
    command:
      [
        "--replSet",
        "rs1",
        "--bind_ip_all",
        "--port",
        "27012"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-3:
    image: mongo:latest
    container_name: shard1-3
    restart: always
    ports:
      - "27013:27013"
    volumes:
      - shard1-3-data:/data/db
    networks:
      app-network:
        ipv4_address: 173.17.0.13
    depends_on:
      - shard1-1
    command:
      [
        "--replSet",
        "rs1",
        "--bind_ip_all",
        "--port",
        "27013"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2-1:
    image: mongo:latest
    container_name: shard2-1
    restart: always
    ports:
      - "27021:27021"
    volumes:
      - shard2-1-data:/data/db
    networks:
      app-network:
        ipv4_address: 173.17.0.21
    command:
      [
        "--shardsvr",
        "--replSet",
        "rs2",
        "--bind_ip_all",
        "--port",
        "27021"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2-2:
    image: mongo:latest
    container_name: shard2-2
    restart: always
    ports:
      - "27022:27022"
    volumes:
      - shard2-2-data:/data/db
    networks:
      app-network:
        ipv4_address: 173.17.0.22
    depends_on:
      - shard2-1
    command:
      [
        "--replSet",
        "rs2",
        "--bind_ip_all",
        "--port",
        "27022"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2-3:
    image: mongo:latest
    container_name: shard2-3
    restart: always
    ports:
      - "27023:27023"
    volumes:
      - shard2-3-data:/data/db
    networks:
      app-network:
        ipv4_address: 173.17.0.23
    depends_on:
      - shard2-1
    command:
      [
        "--replSet",
        "rs2",
        "--bind_ip_all",
        "--port",
        "27023"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    networks:
      app-network:
        ipv4_address: 173.17.0.5
    depends_on:
      - redis
      - router
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://router:27040"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis:6379"

  mongosetup:
    image: mongo:latest
    container_name: mongosetup
    depends_on:
      - configSrv
      - router
      - shard1-1
      - shard1-2
      - shard1-3
      - shard2-1
      - shard2-2
      - shard2-3
    networks:
      app-network:
        ipv4_address: 173.17.0.50
    restart: "no"
    entrypoint: [ "bash", "-c", "sleep 10 &&
      echo mongosetup_step_1 && 
      mongosh --host configSrv --port 27030 --eval 'rs.initiate(
        {
          _id : \"config_server\",
            configsvr: true,
            members: [
              { _id : 0, host : \"configSrv:27030\" }]
        });' &&
      echo mongosetup_step_2 &&
      mongosh --host shard1-1 --port 27011 --eval 'rs.initiate(
        {
          _id: \"rs1\",
          members: [
            { _id: 0, host: \"shard1-1:27011\" },
            { _id: 1, host: \"shard1-2:27012\" },
            { _id: 2, host: \"shard1-3:27013\" }
          ]
        });' &&
      echo mongosetup_step_3 &&
      mongosh --host shard2-1  --port 27021 --eval 'rs.initiate(
        {
          _id: \"rs2\",
          members: [
            { _id: 0, host: \"shard2-1:27021\" },
            { _id: 1, host: \"shard2-2:27022\" },
            { _id: 2, host: \"shard2-3:27023\" }
          ]
        });' &&
      echo mongosetup_step_4 && sleep 10 &&
      mongosh --host router --port 27040 --eval '
        sh.addShard( \"rs1/shard1-1:27011\");
        sh.addShard( \"rs2/shard2-1:27021\");
        sh.enableSharding(\"somedb\");
        sh.shardCollection(\"somedb.helloDoc\", { \"name\" : \"hashed\" });' &&
      echo mongosetup_step_5 &&
      mongosh \"mongodb://router:27040/somedb\" --eval '
        for(var i = 0; i < 1000; i++) { db.helloDoc.insert({age:i, name:\"ly\"+i}) };
        db.helloDoc.countDocuments();'" ]

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/24

volumes:
  redis_data:
  config-data:
  shard1-1-data:
  shard1-2-data:
  shard1-3-data:
  shard2-1-data:
  shard2-2-data:
  shard2-3-data: